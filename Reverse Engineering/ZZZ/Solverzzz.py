#!/usr/bin/env python3
from z3 import *

# Create a solver instance
s = Solver()

# Create 23 BitVec variables (v7 through v29)
v = [BitVec(f"v{i}", 32) for i in range(7, 30)]
v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29 = v

# Constrain each variable to be printable ASCII
for vi in v:
    s.add(vi >= 32, vi <= 126)

# v7 constraints
s.add(6098 * v7 + (v7 ^ 0x135C) + v7 - 4286 == 506810)
s.add(1892 * v7 + (v7 ^ 0x558) + v7 - 3697 == 154713)
s.add(741 * v7 + (v7 ^ 0xFB8) + v7 - 660 == 65001)
s.add(6525 * v7 + (v7 ^ 0x3CD) + v7 - 1138 == 541446)
s.add(53 * v7 + (v7 ^ 0x1AB1) + v7 - 5299 == 6065)
s.add((v7 ^ 0x1E) + 4563 * v7 + v7 - 3380 == 375509)
s.add(6693 * v7 + (v7 ^ 0x1355) + v7 - 4991 == 555481)
s.add(4666 * v7 + (v7 ^ 0x15A8) + v7 - 559 == 392429)
s.add(5938 * v7 + (v7 ^ 0x19F8) + v7 - 4068 == 495440)
s.add(6793 * v7 + (v7 ^ 0x1A45) + v7 - 1424 == 569156)

# v8 constraints
s.add(3266 * v8 + (v8 ^ 0x15F3) + v8 - 6381 == 365030)
s.add(583 * v8 + (v8 ^ 0x21E) + v8 - 544 == 65486)
s.add(4280 * v8 + (v8 ^ 0x503) + v8 - 4332 == 476535)
s.add(4704 * v8 + (v8 ^ 0x25B) + v8 - 5305 == 522210)
s.add(5842 * v8 + (v8 ^ 0x1A4) + v8 - 4933 == 649951)
s.add(3936 * v8 + (v8 ^ 0x1378) + v8 - 4963 == 440853)
s.add(111 * v8 + (v8 ^ 0x1264) + v8 - 2707 == 14465)
s.add(5102 * v8 + (v8 ^ 0x879) + v8 - 1282 == 572311)
s.add(5662 * v8 + (v8 ^ 0x473) + v8 - 961 == 634322)
s.add(2525 * v8 + (v8 ^ 0x2D7) + v8 - 482 == 283109)

# v9 constraints
s.add(3713 * v9 + (v9 ^ 0xF99) + v9 - 6101 == 358245)
s.add(3125 * v9 + (v9 ^ 0x10F4) + v9 - 6643 == 300824)
s.add(3433 * v9 + (v9 ^ 0x587) + v9 - 721 == 333887)
s.add(560 * v9 + (v9 ^ 0x17E8) + v9 - 1089 == 59353)
s.add(5629 * v9 + (v9 ^ 0x1295) + v9 - 1509 == 549453)
s.add(3594 * v9 + (v9 ^ 0x6BD) + v9 - 6493 == 343978)
s.add(1352 * v9 + (v9 ^ 0x640) + v9 - 3997 == 128813)
s.add(4060 * v9 + (v9 ^ 0x1A2F) + v9 - 6166 == 394485)
s.add(5342 * v9 + (v9 ^ 0x1428) + v9 - 100 == 523364)
s.add(6068 * v9 + (v9 ^ 0x1E0) + v9 - 592 == 588486)

# v10 constraints
s.add(6550 * v10 + (v10 ^ 0x1061) + v10 - 4349 == 746580)
s.add((v10 ^ 0x72) + 5682 * v10 + v10 - 1721 == 646141)
s.add(5356 * v10 + (v10 ^ 0xDDB) + v10 - 3136 == 611059)
s.add(5841 * v10 + (v10 ^ 0xF20) + v10 - 2051 == 667859)
s.add(6930 * v10 + (v10 ^ 0x9E4) + v10 - 6809 == 785779)
s.add(1235 * v10 + (v10 ^ 0x17EE) + v10 - 1329 == 145619)
s.add(523 * v10 + (v10 ^ 0x1FE) + v10 - 2929 == 57203)
s.add(4520 * v10 + (v10 ^ 0x11DA) + v10 - 2427 == 517487)
s.add(3482 * v10 + (v10 ^ 0xA93) + v10 - 382 == 399465)
s.add(3346 * v10 + (v10 ^ 0x70E) + v10 - 862 == 382612)

# v11 constraints
s.add(3702 * v11 + (v11 ^ 0x56B) + v11 - 5056 == 392445)
s.add((v11 ^ 0x64) + 1083 * v11 + v11 - 5170 == 110833)
s.add(2568 * v11 + (v11 ^ 0x1464) + v11 - 1512 == 278506)
s.add(5704 * v11 + (v11 ^ 0xF11) + v11 - 5384 == 609013)
s.add(787 * v11 + (v11 ^ 0xDFE) + v11 - 948 == 86845)
s.add(391 * v11 + (v11 ^ 0x12D1) + v11 - 6838 == 39900)
s.add(1720 * v11 + (v11 ^ 0x14DD) + v11 - 143 == 189306)
s.add(4413 * v11 + (v11 ^ 0xA60) + v11 - 4477 == 470392)
s.add(6841 * v11 + (v11 ^ 0x170E) + v11 - 216 == 737867)
s.add((v11 ^ 0x7FC) + 18 * v11 + v11 - 1786 == 2190)

# v12 constraints
s.add(881 * v12 + (v12 ^ 0x1672) + v12 - 3174 == 110953)
s.add(5937 * v12 + (v12 ^ 0x19C1) + v12 - 3038 == 733922)
s.add(3902 * v12 + (v12 ^ 0x890) + v12 - 1054 == 481298)
s.add(5178 * v12 + (v12 ^ 0x2B4) + v12 - 4911 == 632825)
s.add(3358 * v12 + (v12 ^ 0x5C7) + v12 - 1288 == 413337)
s.add(4070 * v12 + (v12 ^ 0x74E) + v12 - 6106 == 496472)
s.add(3939 * v12 + (v12 ^ 0xD1A) + v12 - 4242 == 483803)
s.add(4083 * v12 + (v12 ^ 0x31E) + v12 - 6662 == 496539)
s.add(1591 * v12 + (v12 ^ 0x1B2) + v12 - 5360 == 190913)
s.add(1571 * v12 + (v12 ^ 0x1C5) + v12 - 435 == 193367)

# v13 constraints
s.add(3358 * v13 + (v13 ^ 0x536) + v13 - 5945 == 297753)
s.add((v13 ^ 0x42) + 6296 * v13 + v13 - 5570 == 561184)
s.add(2129 * v13 + (v13 ^ 0xE94) + v13 - 557 == 194933)
s.add(3183 * v13 + (v13 ^ 0x6A9) + v13 - 1249 == 287090)
s.add(889 * v13 + (v13 ^ 0x13C7) + v13 - 2492 == 82629)
s.add(2178 * v13 + (v13 ^ 0x874) + v13 - 4126 == 194078)
s.add(1079 * v13 + (v13 ^ 0x16EC) + v13 - 511 == 102503)
s.add(5085 * v13 + (v13 ^ 0xABA) + v13 - 1074 == 459450)
s.add(4542 * v13 + (v13 ^ 0x1005) + v13 - 1272 == 411789)
s.add(2933 * v13 + (v13 ^ 0x1629) + v13 - 1725 == 268082)

# v14 constraints
s.add(3132 * v14 + (v14 ^ 0x722) + v14 - 2823 == 158769)
s.add(1873 * v14 + (v14 ^ 0x481) + v14 - 2653 == 94123)
s.add(238 * v14 + (v14 ^ 0xCD2) + v14 - 6149 == 9337)
s.add(795 * v14 + (v14 ^ 0x1856) + v14 - 886 == 45955)
s.add(1809 * v14 + (v14 ^ 0x1AE3) + v14 - 5949 == 93225)
s.add(4301 * v14 + (v14 ^ 0x740) + v14 - 909 == 220400)
s.add(1459 * v14 + (v14 ^ 0xA8B) + v14 - 6777 == 70427)
s.add(1734 * v14 + (v14 ^ 0x243) + v14 - 2554 == 86555)
s.add(2572 * v14 + (v14 ^ 0x1402) + v14 - 6655 == 129737)
s.add(3845 * v14 + (v14 ^ 0x352) + v14 - 5123 == 191888)

# v15 constraints
s.add(5334 * v15 + (v15 ^ 0xEA3) + v15 - 6949 == 503712)
s.add(953 * v15 + (v15 ^ 0x15F4) + v15 - 897 == 95280)
s.add(3606 * v15 + (v15 ^ 0x16E2) + v15 - 3944 == 344542)
s.add(2551 * v15 + (v15 ^ 0x1911) + v15 - 2969 == 245949)
s.add(3437 * v15 + (v15 ^ 0x4E9) + v15 - 2883 == 324933)
s.add(2181 * v15 + (v15 ^ 0x15B7) + v15 - 4740 == 208158)
s.add(2854 * v15 + (v15 ^ 0x1A7E) + v15 - 470 == 277444)
s.add(2662 * v15 + (v15 ^ 0x60B) + v15 - 1050 == 253555)
s.add(4980 * v15 + (v15 ^ 0x1018) + v15 - 5936 == 471426)
s.add(4431 * v15 + (v15 ^ 0x2F8) + v15 - 6550 == 415169)

# v16 constraints
s.add(2585 * v16 + (v16 ^ 0x17CE) + v16 - 3328 == 201813)
s.add((v16 ^ 0x4E) + 2330 * v16 + v16 - 1743 == 177747)
s.add(2991 * v16 + (v16 ^ 0xD79) + v16 - 632 == 233132)
s.add(6935 * v16 + (v16 ^ 0x1770) + v16 - 81 == 539940)
s.add(2935 * v16 + (v16 ^ 0x8B8) + v16 - 1338 == 227027)
s.add(5819 * v16 + (v16 ^ 0x113D) + v16 - 6661 == 445943)
s.add(3354 * v16 + (v16 ^ 0x12B) + v16 - 6474 == 252219)
s.add(3588 * v16 + (v16 ^ 0xAA5) + v16 - 817 == 278328)
s.add(4402 * v16 + (v16 ^ 0x1F5) + v16 - 4701 == 334770)
s.add(3133 * v16 + (v16 ^ 0x1344) + v16 - 5461 == 240730)

# v17 constraints
s.add(2715 * v17 + (v17 ^ 0x138) + v17 - 4350 == 137150)
s.add(6043 * v17 + (v17 ^ 0xA52) + v17 - 4429 == 312521)
s.add(818 * v17 + (v17 ^ 0x1602) + v17 - 673 == 47601)
s.add(1214 * v17 + (v17 ^ 0x14F4) + v17 - 6673 == 61819)
s.add(1059 * v17 + (v17 ^ 0x533) + v17 - 1936 == 54471)
s.add(2162 * v17 + (v17 ^ 0x1B02) + v17 - 6113 == 113329)
s.add(1854 * v17 + (v17 ^ 0xBF7) + v17 - 6176 == 93295)
s.add(1124 * v17 + (v17 ^ 0x19FB) + v17 - 1697 == 63410)
s.add(1941 * v17 + (v17 ^ 0xF09) + v17 - 2198 == 102687)
s.add((v17 ^ 0xD) + 6642 * v17 + v17 - 161 == 345332)

# v18 constraints
s.add(4898 * v18 + (v18 ^ 0xAA8) + v18 - 237 == 526711)
s.add(2279 * v18 + (v18 ^ 0x61F) + v18 - 2880 == 242732)
s.add(6472 * v18 + (v18 ^ 0x951) + v18 - 1309 == 693664)
s.add(176 * v18 + (v18 ^ 0xD23) + v18 - 6673 == 15666)
s.add(6849 * v18 + (v18 ^ 0x1147) + v18 - 1035 == 736311)
s.add(1580 * v18 + (v18 ^ 0x19B9) + v18 - 744 == 175033)
s.add(489 * v18 + (v18 ^ 0x4D2) + v18 - 3807 == 49832)
s.add(6429 * v18 + (v18 ^ 0x936) + v18 - 3254 == 687153)
s.add(921 * v18 + (v18 ^ 0xFDF) + v18 - 134 == 102540)
s.add(3119 * v18 + (v18 ^ 0xE98) + v18 - 147 == 337520)

# v19 constraints
s.add(3044 * v19 + (v19 ^ 0x595) + v19 - 2876 == 306189)
s.add(3282 * v19 + (v19 ^ 0xE7D) + v19 - 4443 == 330748)
s.add(5926 * v19 + (v19 ^ 0xC8C) + v19 - 6592 == 595340)
s.add(266 * v19 + (v19 ^ 0xC51) + v19 - 2750 == 27341)
s.add(6939 * v19 + (v19 ^ 0xAED) + v19 - 6937 == 696699)
s.add(770 * v19 + (v19 ^ 0x102E) + v19 - 6317 == 75725)
s.add(1514 * v19 + (v19 ^ 0x1217) + v19 - 583 == 157154)
s.add(5322 * v19 + (v19 ^ 0xF0F) + v19 - 2705 == 538864)
s.add(1607 * v19 + (v19 ^ 0x12A9) + v19 - 6769 == 160451)
s.add(1505 * v19 + (v19 ^ 0x39F) + v19 - 3300 == 149824)

# v20 constraints
s.add(1652 * v20 + (v20 ^ 0xE98) + v20 - 4730 == 189184)
s.add((v20 ^ 0x31) + 4292 * v20 + v20 - 1470 == 492291)
s.add(1766 * v20 + (v20 ^ 0x166B) + v20 - 4446 == 204415)
s.add(1153 * v20 + (v20 ^ 0x1775) + v20 - 630 == 137974)
s.add(3904 * v20 + (v20 ^ 0x1757) + v20 - 3192 == 451807)
s.add(3872 * v20 + (v20 ^ 0x196D) + v20 - 365 == 451460)
s.add(2985 * v20 + (v20 ^ 0x41F) + v20 - 4996 == 339526)
s.add(3568 * v20 + (v20 ^ 0x17FD) + v20 - 1646 == 414819)
s.add(6273 * v20 + (v20 ^ 0x21F) + v20 - 6423 == 715707)
# Special manipulation for v20: modify its second byte.
b0 = v20 & 0xFF
b1 = ((LShR(v20, 7)) ^ 8) & 0xFF
b2 = LShR(v20, 16) & 0xFF
b3 = LShR(v20, 24) & 0xFF
v3 = b0 + (b1 << 8) + (b2 << 16) + (b3 << 24)
s.add(5837 * v20 + v3 + v20 - 146 == 673387)

# v21 constraints
s.add(2169 * v21 + (v21 ^ 0xD88) + v21 - 3882 == 205811)
s.add(6899 * v21 + (v21 ^ 0x314) + v21 - 3695 == 652648)
s.add(1164 * v21 + (v21 ^ 0x9FA) + v21 - 2465 == 110679)
s.add(5610 * v21 + (v21 ^ 0xD90) + v21 - 1265 == 535315)
# Modify lowest byte of v21
v4 = (v21 & -256) | ((v21 ^ 0xAB) & 0xFF)
s.add(6005 * v21 + v4 + v21 - 35 == 570779)
s.add(2228 * v21 + (v21 ^ 0xEDF) + v21 - 6545 == 208922)
s.add(2593 * v21 + (v21 ^ 0x1A88) + v21 - 395 == 252906)
s.add((v21 ^ 0xD3F) + 384 * v21 + v21 - 6300 == 33699)
s.add(2030 * v21 + (v21 ^ 0x99C) + v21 - 6843 == 188601)
s.add(1249 * v21 + (v21 ^ 0x530) + v21 - 1686 == 118455)

# v22 constraints
s.add(1395 * v22 + (v22 ^ 0xCBD) + v22 - 5150 == 100074)
s.add(5041 * v22 + (v22 ^ 0xC77) + v22 - 5702 == 365498)
s.add(1531 * v22 + (v22 ^ 0x1103) + v22 - 1052 == 115210)
s.add(3996 * v22 + (v22 ^ 0xAC9) + v22 - 4524 == 289945)
s.add(5025 * v22 + (v22 ^ 0x705) + v22 - 4695 == 364071)
s.add(5060 * v22 + (v22 ^ 0xECD) + v22 - 1297 == 371872)
s.add(4636 * v22 + (v22 ^ 0x1802) + v22 - 1121 == 343599)
s.add(5031 * v22 + (v22 ^ 0x1982) + v22 - 4276 == 369663)
s.add(4126 * v22 + (v22 ^ 0x54B) + v22 - 6500 == 296053)
s.add(3764 * v22 + (v22 ^ 0xA2C) + v22 - 624 == 276882)

# v23 constraints
s.add(5450 * v23 + (v23 ^ 0xEB3) + v23 - 3885 == 632214)
s.add(3396 * v23 + (v23 ^ 0x72B) + v23 - 108 == 395831)
s.add(2129 * v23 + (v23 ^ 0xC3A) + v23 - 4227 == 246003)
s.add(3181 * v23 + (v23 ^ 0x1AEA) + v23 - 19 == 375907)
s.add(500 * v23 + (v23 ^ 0x1352) + v23 - 1580 == 61438)
s.add(4959 * v23 + (v23 ^ 0xBDE) + v23 - 5133 == 573213)
s.add(6257 * v23 + (v23 ^ 0x1D5) + v23 - 4310 == 722035)
s.add(409 * v23 + (v23 ^ 0x1491) + v23 - 3871 == 49038)
s.add(4449 * v23 + (v23 ^ 0x976) + v23 - 4991 == 513515)
s.add(3981 * v23 + (v23 ^ 0x182B) + v23 - 390 == 467761)

# v24 constraints
s.add(4605 * v24 + (v24 ^ 0x123C) + v24 - 4154 == 438123)
s.add(1285 * v24 + (v24 ^ 0x35B) + v24 - 5753 == 117189)
s.add(1393 * v24 + (v24 ^ 0xAC1) + v24 - 1915 == 133233)
s.add(5385 * v24 + (v24 ^ 0x1642) + v24 - 1836 == 515495)
s.add(5168 * v24 + (v24 ^ 0x1837) + v24 - 6783 == 490520)
s.add(6749 * v24 + (v24 ^ 0x105D) + v24 - 2616 == 642732)
s.add(4677 * v24 + (v24 ^ 0xCA9) + v24 - 3085 == 444643)
s.add(2019 * v24 + (v24 ^ 0xD56) + v24 - 1381 == 193856)
s.add(5654 * v24 + (v24 ^ 0x37F) + v24 - 3804 == 534221)
s.add(3676 * v24 + (v24 ^ 0x1220) + v24 - 3022 == 351028)

# v25 constraints
s.add(4067 * v25 + (v25 ^ 0x7F8) + v25 - 485 == 282188)
s.add(1016 * v25 + (v25 ^ 0xCFD) + v25 - 1109 == 72320)
s.add(6769 * v25 + (v25 ^ 0x1183) + v25 - 3862 == 467818)
s.add(1715 * v25 + (v25 ^ 0xB53) + v25 - 2591 == 118651)
s.add(3552 * v25 + (v25 ^ 0x44A) + v25 - 1585 == 244611)
s.add(3130 * v25 + (v25 ^ 0x282) + v25 - 5539 == 211211)
s.add(5746 * v25 + (v25 ^ 0x14C8) + v25 - 1811 == 399993)
# Modify lowest byte of v25
v5 = (v25 & -256) | ((v25 ^ 0x86) & 0xFF)
s.add(1862 * v25 + v5 + v25 - 5226 == 123516)
s.add(3008 * v25 + (v25 ^ 0x169C) + v25 - 5885 == 207585)
s.add(6812 * v25 + (v25 ^ 0x8D4) + v25 - 3556 == 468734)

# v26 constraints
s.add(2629 * v26 + (v26 ^ 0x18B7) + v26 - 5360 == 137675)
s.add(2878 * v26 + (v26 ^ 0x176) + v26 - 1716 == 148314)
s.add(3987 * v26 + (v26 ^ 0x1AFB) + v26 - 6199 == 208040)
s.add(880 * v26 + (v26 ^ 0x676) + v26 - 1893 == 45521)
s.add(3236 * v26 + (v26 ^ 0x136A) + v26 - 2756 == 170526)
s.add(4821 * v26 + (v26 ^ 0x37F) + v26 - 3162 == 248425)
s.add(3391 * v26 + (v26 ^ 0x19F1) + v26 - 1277 == 181704)
s.add(4967 * v26 + (v26 ^ 0x512) + v26 - 1411 == 258243)
s.add(3224 * v26 + (v26 ^ 0x10D2) + v26 - 231 == 171795)
s.add(1904 * v26 + (v26 ^ 0xF49) + v26 - 2255 == 100770)

# v27 constraints
s.add(5224 * v27 + (v27 ^ 0x198E) + v27 - 1613 == 605915)
s.add(3615 * v27 + (v27 ^ 0x994) + v27 - 1751 == 416624)
s.add(5331 * v27 + (v27 ^ 0x183B) + v27 - 1453 == 617943)
s.add(4326 * v27 + (v27 ^ 0x1AC0) + v27 - 3107 == 501333)
s.add(6219 * v27 + (v27 ^ 0xC2B) + v27 - 872 == 717588)
s.add(1770 * v27 + (v27 ^ 0x2DB) + v27 - 1767 == 202578)
s.add(4933 * v27 + (v27 ^ 0xF2F) + v27 - 1203 == 570139)
s.add(6210 * v27 + (v27 ^ 0x75D) + v27 - 2266 == 713837)
s.add(653 * v27 + (v27 ^ 0x1309) + v27 - 6336 == 73860)
s.add(648 * v27 + (v27 ^ 0x198D) + v27 - 3281 == 78008)

# v28 constraints
s.add(2903 * v28 + (v28 ^ 0x12BC) + v28 - 2618 == 353571)
s.add(4280 * v28 + (v28 ^ 0x5A2) + v28 - 4834 == 514666)
s.add(5795 * v28 + (v28 ^ 0x1989) + v28 - 4069 == 703887)
s.add(279 * v28 + (v28 ^ 0xF36) + v28 - 3948 == 33851)
s.add(3151 * v28 + (v28 ^ 0xB5D) + v28 - 6827 == 377417)
s.add(4023 * v28 + (v28 ^ 0x1247) + v28 - 353 == 491221)
s.add(5555 * v28 + (v28 ^ 0xA53) + v28 - 4004 == 670874)
s.add(6758 * v28 + (v28 ^ 0x75D) + v28 - 5653 == 814014)
s.add(1819 * v28 + (v28 ^ 0x8FE) + v28 - 3321 == 219082)
s.add(1187 * v28 + (v28 ^ 0xB86) + v28 - 2893 == 143926)

# v29 constraints
s.add(4232 * v29 + (v29 ^ 0x15F1) + v29 - 720 == 533921)
s.add(6850 * v29 + (v29 ^ 0xB70) + v29 - 1926 == 857278)
s.add(4480 * v29 + (v29 ^ 0x5EE) + v29 - 1495 == 560057)
s.add(1344 * v29 + (v29 ^ 0x705) + v29 - 5153 == 164884)
s.add(5056 * v29 + (v29 ^ 0x1354) + v29 - 1093 == 635937)
s.add(4678 * v29 + (v29 ^ 0x6E7) + v29 - 5773 == 580792)
s.add(5031 * v29 + (v29 ^ 0x161) + v29 - 1447 == 627837)
s.add(2067 * v29 + (v29 ^ 0x1ADB) + v29 - 3096 == 262226)
s.add(515 * v29 + (v29 ^ 0x5D2) + v29 - 5398 == 60557)
s.add(3837 * v29 + (v29 ^ 0xA75) + v29 - 1379 == 480939)

if s.check() == sat:
    m = s.model()
    flag = "".join([chr(m[vi].as_long()) for vi in v])
    print("Flag:", flag)
else:
    print("No solution found")
solverzzz.py
15 Ko
